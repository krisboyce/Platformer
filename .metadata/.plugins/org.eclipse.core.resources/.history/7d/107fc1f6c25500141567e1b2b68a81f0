package com.platformer.engine;

import java.awt.Graphics;
import java.awt.Insets;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JPanel;


public class Game extends JFrame {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	static JPanel display = new JPanel();
	public static final int FPS = 2;
	public static final int Skips = 1000000 / FPS;
	public static final int maxSkips = 1;
	public static final int WIDTH = 768;
	public static final int HEIGHT = 512;
	public static long startTime = System.nanoTime();
	public int xOffset = 0;
	public int yOffset = 0;
	public Point origin = new Point(0, 0);
	private static boolean isRunning = true;
	public ArrayList<Tile> tiles = new ArrayList<Tile>();
	public int[][] displayGrid = new int[WIDTH / 32][HEIGHT / 32];
	public Player p;

	public static void main(String[] args) {

		Game game = new Game();
		game.run();
		System.exit(0);
	}

	public static long getFrameCount() {
		System.out.println(System.nanoTime() - startTime);
		return System.nanoTime() - startTime;

	}

	double interpolation = 0;

	public void run() {
		init();

		long nextFrame = getFrameCount();

		while (isRunning) {

			long cycles = 0;
			while (getFrameCount() > nextFrame && cycles < Game.maxSkips) {
				update();
				nextFrame += Game.Skips;
				cycles++;
			}
			interpolation = (double) getFrameCount() + Skips - nextFrame
					/ Skips;
			draw(interpolation);
		}

		this.setVisible(false);

	}

	Insets insets;
	InputHandler input;

	public void init() {
		this.setTitle("PlatformerEngine");
		this.setSize(WIDTH, HEIGHT);
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		this.setResizable(false);
		this.setVisible(true);
		this.setLocationRelativeTo(null);

		insets = this.getInsets();
		this.setSize(insets.left + WIDTH + insets.right, insets.top + HEIGHT
				+ insets.bottom);

		InitHandlers();
		InitTiles();
		InitEntities();

	}

	public void InitHandlers() {
		this.input = new InputHandler(this);
	}

	public void InitEntities() {
		p = new Player(WIDTH / 2, HEIGHT / 2, 32, 64);
		p.Init(gh, input, this);
		p.InitControl(KeyEvent.VK_W, KeyEvent.VK_A, KeyEvent.VK_D);
	}

	public void InitTiles() {
		for (int i = 0; i < WIDTH / 32; i++) {
			tiles.add(new Tile(i, HEIGHT / 32 - 1, TileType.BRICK));
			System.out.println(i);
		}
		for (Tile t : tiles) {
			System.out.println(t.toString());
			t.g = gh;
		}
	}

	public void update() {
		p.update();
		for (Tile t : tiles) {
			t.update();
			p.collide(t.boundingBox);
		}
		if (p.Position.x > WIDTH - (WIDTH / 4)) {
			p.Position.x = WIDTH - (WIDTH / 4);
			xOffset++;
			for (Tile t : tiles) {
				t.Position.x -= 1;
			}
		}
		if (p.Position.x < WIDTH / 4) {
			p.Position.x = WIDTH / 4;
			xOffset--;
			for (Tile t : tiles) {
				t.Position.x += 1;
			}
		}
		this.origin.x = (int) Math.floor(xOffset / 32);
		this.origin.y = (int) Math.floor(yOffset / 32);
	}

	BufferedImage backBuffer = new BufferedImage(WIDTH, HEIGHT,
			BufferedImage.TYPE_INT_RGB);
	GraphicsHandler gh = new GraphicsHandler(backBuffer.getGraphics());

	public void draw(double interpolation) {
		// start graphics
		Graphics g = this.getGraphics();
		// Setup background
		gh.background(0);
		gh.drawBackground(WIDTH, HEIGHT);
		for (Tile t : tiles) {
			t.draw(interpolation);
		}
		p.draw(interpolation);
		// end graphics
		g.drawImage(backBuffer, insets.left, insets.top, this);

	}
}
